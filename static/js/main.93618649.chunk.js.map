{"version":3,"sources":["Components/Canvas/Collision/collisionAnnimation.js","Components/Canvas/Collision/Collision.js","Components/Canvas/Floating/floatingAnnimation.js","Components/Canvas/Floating/Floating.js","Components/Canvas/Gravity/gravityAnnimation.js","Components/Canvas/Gravity/Gravity.js","App.js","serviceWorker.js","index.js"],"names":["canvas","c","setCanvas","canvasImport","cImport","width","document","documentElement","clientWidth","height","clientHeight","style","background","colors","mouse","x","window","innerWidth","y","innerHeight","particlesArray","particle","randomIntFromRange","min","max","Math","floor","random","randomColor","length","getDistance","x1","y1","x2","y2","xDist","yDist","sqrt","pow","mouseMove","event","clientX","clientY","rotate","velocity","angle","cos","sin","resolveCollision","otherParticle","xVelocityDiff","yVelocityDiff","atan2","m1","mass","m2","u1","u2","v1","v2","vFinal1","vFinal2","Particle","dx","dy","radius","color","_this","this","Object","classCallCheck","opacity","stroke","draw","beginPath","arc","PI","save","globalAlpha","fillStyle","fill","restore","strokeStyle","closePath","update","particles","i","init","j","push","animate","requestAnimationFrame","clearRect","Collision","mouseMoveCB","logic","refs","getContext","_this2","addEventListener","react_default","a","createElement","className","ref","onMouseMove","Component","colorArray","circleArray","Circle","originalSize","buildShapes","constructorAnnimation","Floating","ball","ballsArray","Ball","strokeIndex","round","colorIndex","Gravity","App","state","canvasType","switchCanvas","type","setState","Canvas_Gravity_Gravity","Canvas_Floating_Floating","Canvas_Collision_Collision","onClick","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.93618649.chunk.js","sourcesContent":["let canvas = null;\nlet c = null;\n\n// Set Initial Canvas\nexport const setCanvas = (canvasImport, cImport) => {\n    canvas = canvasImport;\n    c = cImport;\n\n    canvas.width = document.documentElement.clientWidth;\n    canvas.height = document.documentElement.clientHeight - 40;\n    canvas.style.background = \"#eee\";\n}\n\n// Global Vars\nconst colors = ['#2B3A42', '#3F5866', '#BDD3DE', '#F0F0DF', \"#FF9000\"];\nconst mouse = {x: window.innerWidth / 2, y: window.innerHeight / 2};\nlet particlesArray = [];\nlet particle = null;\n\n// Utilities\nfunction randomIntFromRange(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min)\n}\n\nfunction randomColor(colors) {\n    return colors[Math.floor(Math.random() * colors.length)]\n}\n\nfunction getDistance(x1, y1, x2, y2) {\n    const xDist = x2 - x1\n    const yDist = y2 - y1\n\n    return Math.sqrt(Math.pow(xDist, 2) + Math.pow(yDist, 2))\n}\n\n// Event Listeners\nexport const mouseMove = (event) => {\n    mouse.x = event.clientX\n    mouse.y = event.clientY\n}\n\n// Geometric Function One\n// ===================================================================================\n//  Takes velocities and alters them as if the coordinate system they're on was rotated\n//  @param  Object | velocity | The velocity of an individual particle\n//  @param  Float  | angle    | The angle of collision between two objects in radians\n//  @return Object | The altered x and y velocities after the coordinate system has been rotated\n \n\nconst rotate = (velocity, angle) => {\n    const rotatedVelocities = {\n        x: velocity.x * Math.cos(angle) - velocity.y * Math.sin(angle),\n        y: velocity.x * Math.sin(angle) + velocity.y * Math.cos(angle)\n    };\n\n    return rotatedVelocities;\n}\n\n// Geometric Function Two\n// ===================================================================================\n// Swaps out two colliding particles' x and y velocities after\n// running through an elastic collision reaction equation \n// @param  Object | particle      | A particle object with x and y coordinates, plus velocity\n// @param  Object | otherParticle | A particle object with x and y coordinates, plus velocity\n// @return Null | Does not return a value\n \nconst resolveCollision = (particle, otherParticle) => {\n    const xVelocityDiff = particle.velocity.x - otherParticle.velocity.x;\n    const yVelocityDiff = particle.velocity.y - otherParticle.velocity.y;\n\n    const xDist = otherParticle.x - particle.x;\n    const yDist = otherParticle.y - particle.y;\n\n    // Prevent accidental overlap of particles\n    if (xVelocityDiff * xDist + yVelocityDiff * yDist >= 0) {\n\n        // Grab angle between the two colliding particles\n        const angle = -Math.atan2(otherParticle.y - particle.y, otherParticle.x - particle.x);\n\n        // Store mass in var for better readability in collision equation\n        const m1 = particle.mass;\n        const m2 = otherParticle.mass;\n\n        // Velocity before equation\n        const u1 = rotate(particle.velocity, angle);\n        const u2 = rotate(otherParticle.velocity, angle);\n\n        // Velocity after 1d collision equation\n        const v1 = { x: u1.x * (m1 - m2) / (m1 + m2) + u2.x * 2 * m2 / (m1 + m2), y: u1.y };\n        const v2 = { x: u2.x * (m1 - m2) / (m1 + m2) + u1.x * 2 * m2 / (m1 + m2), y: u2.y };\n\n        // Final velocity after rotating axis back to original location\n        const vFinal1 = rotate(v1, -angle);\n        const vFinal2 = rotate(v2, -angle);\n\n        // Swap particle velocities for realistic bounce effect\n        particle.velocity.x = vFinal1.x;\n        particle.velocity.y = vFinal1.y;\n\n        otherParticle.velocity.x = vFinal2.x;\n        otherParticle.velocity.y = vFinal2.y;\n    }\n}\n\n// Constructor For Shape Objects\nclass Particle {\n    constructor (x, y, dx, dy, radius, color) {\n        this.x = x;\n        this.y = y;\n        this.velocity = {x: dx, y: dy}\n        this.mass = 1;\n        this.opacity = 0;\n        this.radius = radius;\n        this.color = color;\n        this.stroke = randomColor(colors);\n    \n        this.draw = function() {\n            c.beginPath();\n            c.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false);\n            c.save();\n            c.globalAlpha = this.opacity;\n            c.fillStyle = this.color;\n            c.fill();\n            c.restore();\n            c.strokeStyle = this.stroke;\n            c.stroke();\n            c.closePath();\n        }\n\n        this.update = (particles) => { \n            // Check Distances Between All Particles\n            for(let i = 0; i < particles.length; i++){\n                // Skips Loop If Particle Is Evaluating Itself\n                if(this === particles[i]) continue;\n                let distance = getDistance(this.x, this.y, particlesArray[i].x, particlesArray[i].y);\n                if((distance - this.radius - particlesArray[i].radius) < 0){\n                    // console.log(\"Bump!!!\");\n                    resolveCollision(this, particles[i]);\n                    this.opacity += 0.2;\n                }\n            }\n\n            // Changes The Direction Based On Bounds\n            if(this.x + this.radius > canvas.width || this.x - this.radius < 0){\n                this.velocity.x = -this.velocity.x;\n            }\n\n            if(this.y + this.radius > canvas.height || this.y - this.radius < 0){\n                this.velocity.y = -this.velocity.y;\n            }\n\n            // Mouse Colision Detection\n            if(getDistance(mouse.x, mouse.y, this.x, this.y) < 200){\n                this.opacity += 0.2;\n            } else if (this.opacity > 0.2){\n                this.opacity -= 0.2;\n            }\n\n            // Add Velocity\n            this.x += this.velocity.x;\n            this.y += this.velocity.y;\n\n            this.draw()\n        }\n    }\n}\n\n// Implementation\nexport const init = () => {\n    particlesArray = [];\n    for (let i = 0; i < 100; i++) {\n        let radius = randomIntFromRange(10, 15);\n        let y = randomIntFromRange(radius, canvas.height - radius);\n        let x = randomIntFromRange(radius, canvas.width - radius);\n        let dy = randomIntFromRange(-1, 1);\n        let dx = randomIntFromRange(-1, 1);\n        let color = randomColor(colors);\n\n        if(i !== 0){\n            for(let j = 0; j < particlesArray.length; j++){\n                // Calculate Distances On New Particle Vs All Prior\n                let distance = getDistance(x, y, particlesArray[j].x, particlesArray[j].y);\n                // If Distances Less 0 After Accounting For Each's Radius\n                if((distance - radius - particlesArray[j].radius) < 0){\n                    // Regenerate Random X & Y\n                    y = randomIntFromRange(radius, canvas.height - radius);\n                    x = randomIntFromRange(radius, canvas.width - radius);\n                    // Forces Loop To Run Again Until If Condition Not Met\n                    j = -1;\n                }\n            }\n        }\n        particle = new Particle(x, y, dx, dy, radius, color);\n        particlesArray.push(particle)\n    }\n}\n\n// Animation Loop\nexport const animate = () => {\n    requestAnimationFrame(animate)\n    c.clearRect(0, 0, canvas.width, canvas.height)\n\n    for(let i = 0; i < particlesArray.length; i++){\n        particlesArray[i].update(particlesArray);\n    }\n}\n","import React, {Component} from \"react\";\nimport * as logic from \"./collisionAnnimation\";\n\nclass Collision extends Component{\n\n    componentDidMount(){\n        const canvas = this.refs.canvas;\n        const c = canvas.getContext('2d')\n\n        logic.setCanvas(canvas, c);\n        logic.init();\n        logic.animate();\n    }\n    \n    mouseMoveCB = (event) =>{\n        logic.mouseMove(event);\n    }\n\n\n    render(){\n\n        \n    window.addEventListener('resize', () => {\n        const canvas = this.refs.canvas;\n        const c = canvas.getContext('2d')\n\n        logic.setCanvas(canvas, c);\n        logic.init();\n        logic.animate();\n    })\n\n\n        return <canvas \n                    className=\"collision\" \n                    ref=\"canvas\"\n                    onMouseMove={(event)=>this.mouseMoveCB(event)}\n                > \n                \n                </canvas>\n    }\n}\n\nexport default Collision;","let canvas = null;\nlet c = null;\n\n// Set Initial Canvas\nexport const setCanvas = (canvasImport, cImport) => {\n    canvas = canvasImport;\n    c = cImport;\n\n    canvas.width = document.documentElement.clientWidth;\n    canvas.height = document.documentElement.clientHeight - 40;\n    canvas.style.background = \"#eee\";\n}\n\n// Global Variables For Construcor & Interactivity\n// ==============================================================================\nlet mouse = {x: null, y: null};\nlet maxRadius = 40;\nlet colorArray = [\"#573D7B\", \"#FE7F2D\", \"#FCCA46\", \"#A1C181\", \"#579C87\"];\n\n// Array To Hold Multiple Shapes/Circles\nlet circleArray = [];\n\n// Interactivity - Event Listeners (Optional For Constructor)\n// ==============================================================================\nexport const mouseMove = (event) => {\n    mouse.x = event.clientX\n    mouse.y = event.clientY\n}\n\n// Constructor Used To Make Indvidual Shapes\nclass Circle {\n    constructor (x, y, dx, dy, radius) {\n        this.x = x;\n        this.y = y;\n        this.dx = dx;\n        this.dy = dy;\n        this.radius = radius;\n        // Used To Reset To Original Size Rather Than A Fixed PX\n        this.originalSize = radius;\n        this.color = colorArray[Math.floor(Math.random() * colorArray.length - 1)];\n        this.stroke = colorArray[Math.floor(Math.random() * colorArray.length - 1)];\n        // console.log(Math.floor(Math.random * colorArray.length - 1))\n\n        this.draw = function(){\n            // Draws The Circle\n            c.beginPath();\n            c.arc(this.x, this.y, this.radius, 0, Math.PI*2, true);\n            c.strokeStyle = this.color; \n            c.fillStyle = this.stroke;\n            c.stroke();\n            c.fill();\n        }\n\n        this.update = function(){\n            // Changes The Direction Based On Bounds\n            if(this.x + this.radius > window.innerWidth || this.x - this.radius < 0){\n                this.dx = -this.dx;\n            }\n\n            if(this.y + this.radius > window.innerHeight || this.y - this.radius < 0){\n                this.dy = -this.dy;\n            }\n\n            // Increment/Decrement On Each Loop\n            this.x += this.dx;\n            this.y += this.dy;\n\n            // Interactivity (Optional) - If X/Y Within Distance To Mouse\n            if((mouse.x - this.x < 50)\n                && (mouse.x - this.x > -50) \n                && (mouse.y - this.y < 50) \n                && (mouse.y - this.y > -50)){\n                    // Only Increase If Radius If Shape Is Smaller Than 40px\n                    // Keeps Size From Getting Too Big\n                    if(this.radius < maxRadius){\n                        this.radius += 0.5;\n                    }\n            // Compare To Min Radius Which Is Original Size\n            // Prevents From All Shrinking To A Single Size\n            } else if (this.radius > this.originalSize){\n                this.radius -= 0.5;\n            }\n\n            // Render A Circle\n            this.draw();\n        }\n    }\n}\n\n// Build Initial Shapes\nexport const buildShapes = () =>{\n\n    // Resets Array Each Time\n    circleArray = []\n\n    // Loop To Add Random Circles To Array\n    for(let i = 0; i < 30; i++){\n        // Set Random Variable Inputs\n        let radius = Math.random() * 20  + 5;\n        let x = Math.random() * (window.innerWidth - radius*2) + radius;\n        let y = Math.random() * (window.innerHeight - radius*2) + radius;\n        let dx = (Math.random() - 0.5) * 5;\n        let dy = (Math.random() - 0.5) * 4;\n        circleArray.push(new Circle(x,y,dx,dy,radius));\n    }\n}\n\nexport const constructorAnnimation = () =>{\n    requestAnimationFrame(constructorAnnimation);\n\n    // Clear Canvas - Prior Render\n    c.clearRect(0,0,window.innerWidth, window.innerHeight);\n\n    // Loop Through Array To Draw/Annimate\n    for(let i = 0; i < circleArray.length; i++){\n        circleArray[i].update();\n    }\n}\n\n\n","import React, {Component} from \"react\";\nimport * as logic from \"./floatingAnnimation\";\n\nclass Floating extends Component{\n\n    componentDidMount(){\n        const canvas = this.refs.canvas;\n        const c = canvas.getContext('2d')\n\n        logic.setCanvas(canvas, c);\n        logic.buildShapes();\n        logic.constructorAnnimation();\n    }\n    \n    mouseMoveCB = (event) =>{\n        logic.mouseMove(event);\n    }\n\n    render(){\n\n        window.addEventListener('resize', () => {\n            const canvas = this.refs.canvas;\n            const c = canvas.getContext('2d')\n\n            logic.setCanvas(canvas, c);\n            logic.buildShapes();\n            logic.constructorAnnimation();\n        })\n\n        return <canvas \n                    className=\"floating\" \n                    ref=\"canvas\"\n                    onMouseMove={(event)=>this.mouseMoveCB(event)}\n                > \n                \n                </canvas>\n    }\n}\n\nexport default Floating;","let canvas = null;\nlet c = null;\n\n// Set Initial Canvas\nexport const setCanvas = (canvasImport, cImport) => {\n    canvas = canvasImport;\n    c = cImport;\n\n    canvas.width = document.documentElement.clientWidth;\n    canvas.height = document.documentElement.clientHeight - 40;\n    canvas.style.background = \"#eee\";\n}\n\n\n// Global Vars\nconst colors = ['#FFF2C4', '#6000E8', '#5B83FF', '#4000E8', \"#9800FF\"];\nlet gravity = .8;\nlet friction = 0.80;\nlet sideFriction = 0.5;\nlet ball = null;\nlet ballsArray = [];\n\n// Utilities\nfunction randomIntFromRange(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min)\n}\n\nfunction randomColor(colors) {\n    return colors[Math.floor(Math.random() * colors.length)]\n}\n\n// Event Listeners\nexport const newDrop = () =>{\n    canvas.width = document.documentElement.clientWidth;\n    canvas.height = document.documentElement.clientHeight - 40;\n    init()\n}\n\n// Objects\nclass Ball {\n    constructor (x, y, dx, dy, radius, color) {\n        this.x = x;\n        this.y = y;\n        this.dy = dy;\n        this.dx = dx;\n        this.radius = radius;\n        this.color = color;\n        this.strokeIndex = randomIntFromRange(0, colors.length);\n    \n        this.draw = function() {\n            c.beginPath()\n            c.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false)\n            c.fillStyle = this.color\n            c.fill()\n            c.strokeStyle = colors[this.strokeIndex];\n            c.stroke();\n            c.closePath()\n        }\n\n        this.update = function() {\n            // Reverse DY Velocity If Bottom Reached\n            // Bounce Back Slowed By Friction Var\n            // DY Added To Prevent Crossing Height\n            if(this.y + this.radius + this.dy > canvas.height){\n                this.dy = -this.dy * friction;\n            } else {\n                // Accelerate Velocity As Dropping\n                // Forces A Negative Value To Slow Upwards\n                // Triggers DY Back To Downward As Neg Turns Pos\n                this.dy += gravity;   \n            }\n\n            if((this.x + this.radius + this.dx > canvas.width) || (this.x - this.radius < 0)){\n                this.dx = -this.dx;\n            } \n\n            // Change X Once On Floor & Slow It Over Time\n            if(Math.round(this.y + this.radius) === canvas.height){\n                // console.log(\"hit\");\n                this.x += this.dx * sideFriction;\n            }\n\n            // Increment Velocity\n            this.y += this.dy;\n            this.draw()\n        }\n    }\n}\n\n// Implementation\nexport const init = () => {\n    ballsArray = [];\n    for (let i = 0; i < 100; i++) {\n        let radius = randomIntFromRange(5, 20);\n        // Deduct Radius To Prevent Spawn Into Bottom Of Screen\n        let y = randomIntFromRange(-500, 0 - radius);\n        let x = randomIntFromRange(radius, canvas.width - radius);\n        let dy = randomIntFromRange(-2, 2);\n        let dx = randomIntFromRange(-2, 2);\n        let colorIndex = randomIntFromRange(0, colors.length);\n        ball = new Ball(x, y, dx, dy, radius, colors[colorIndex]);\n        ballsArray.push(ball)\n    }\n}\n\n// Animation Loop\nexport const animate = () => {\n    requestAnimationFrame(animate)\n    c.clearRect(0, 0, canvas.width, canvas.height)\n    for(let i = 0; i < ballsArray.length; i++){\n        ballsArray[i].update();\n    }\n}\n","import React, {Component} from \"react\";\nimport * as logic from \"./gravityAnnimation\";\n\nclass Gravity extends Component{\n\n    componentDidMount(){\n        const canvas = this.refs.canvas;\n        const c = canvas.getContext('2d')\n\n        logic.setCanvas(canvas, c);\n        logic.init();\n        logic.animate();\n    }\n    \n\n    render(){\n\n        window.addEventListener('resize', () => {\n            const canvas = this.refs.canvas;\n            const c = canvas.getContext('2d')\n    \n            logic.setCanvas(canvas, c);\n            logic.init();\n            logic.animate();\n        })\n\n        return <canvas \n                    className=\"gravity\" \n                    ref=\"canvas\"\n                > \n                \n                </canvas>\n    }\n}\n\nexport default Gravity;","import React, { Component } from 'react';\nimport Collision from \"./Components/Canvas/Collision/Collision\";\nimport Floating from \"./Components/Canvas/Floating/Floating\";\nimport Gravity from \"./Components/Canvas/Gravity/Gravity\";\nimport './App.css';\n\nclass App extends Component {\n\n  state = {canvas: \"collision\"}\n\n  render() {\n    \n    let canvasType = <div>Hi</div>;\n\n    const switchCanvas = (type) => {\n      this.setState({canvas: type});\n    }\n\n    switch(this.state.canvas){\n      case (\"gravity\"): \n        // console.log(\"Gravity\");\n        canvasType = <Gravity/>;\n        break; \n      case (\"floating\"): \n        // console.log(\"Floating\");\n        canvasType = <Floating/>;\n        break;\n      case (\"collision\"): \n        // console.log(\"Collision\");\n        canvasType = <Collision/>;\n        break;\n    }\n\n\n    return (\n      <div className=\"App\">\n          <header>\n            <button onClick={()=>switchCanvas(\"gravity\")}>Gravity</button>\n            <button onClick={()=>switchCanvas(\"floating\")}>Floating</button>\n            <button onClick={()=>switchCanvas(\"collision\")}>Collision</button>\n          </header>\n          {canvasType}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}